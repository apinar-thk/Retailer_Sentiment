# PYTHON CODE for Article 'A Hybrid Methodology for Evaluating Major Retailers Based on Customer Perspectives Using AI and Fuzzy MCDM'
import requests
from bs4 import BeautifulSoup
from textblob import TextBlob
import pandas as pd
from collections import Counter
import nltk
from nltk.corpus import stopwords

# Download stopwords
nltk.download("stopwords")
stop_words = set(stopwords.words("english"))

# Base URL for Trustpilot (replace with a valid business URL)
base_url = "https://www.trustpilot.com/review/www.amazon.com?date=last3months&page="

def scrape_reviews(base_url, num_pages=10):
    """
    Scrape reviews from Trustpilot.
    """
    all_reviews = []
    for page in range(1, num_pages + 1):
        url = f"{base_url}{page}"
        print(f"Scraping page: {url}")
        
        response = requests.get(url)
        if response.status_code != 200:
            print(f"Failed to fetch {url} (Status Code: {response.status_code})")
            break

        soup = BeautifulSoup(response.content, "html.parser")
        review_blocks = soup.find_all("p", {"class": "typography_body-l__KUYFJ"})
        if not review_blocks:
            print("No more reviews found. Stopping.")
            break

        reviews = [block.text.strip() for block in review_blocks]
        all_reviews.extend(reviews)
    return all_reviews

def get_frequent_words(reviews, top_n=10):
    """
    Extract frequent words from reviews.
    """
    words = []
    for review in reviews:
        words.extend([word.lower() for word in review.split() if word.lower() not in stop_words and word.isalpha()])
    return Counter(words).most_common(top_n)

def calculate_word_sentiments(reviews, frequent_words):
    """
    Calculate sentiment scores for each frequent word.
    """
    word_sentiments = {}
    for word, _ in frequent_words:
        sentiment_sum = 0
        word_count = 0
        
        # Analyze word sentiment in context
        for review in reviews:
            if word in review.lower():
                blob = TextBlob(review)
                sentiment_sum += blob.sentiment.polarity
                word_count += 1
        
        # Calculate average sentiment score for the word
        avg_sentiment = sentiment_sum / word_count if word_count > 0 else 0
        word_sentiments[word] = avg_sentiment
    return word_sentiments

def analyze_sentiment(reviews):
    """
    Analyze sentiment of reviews.
    """
    sentiments = []
    for review in reviews:
        blob = TextBlob(review)
        sentiments.append(blob.sentiment.polarity)
    return sum(sentiments) / len(sentiments) if sentiments else 0

# Main script
if __name__ == "__main__":
    num_pages = int(input("Enter the number of pages to scrape: "))
    top_n = int(input("Enter the number of most frequent words to analyze: "))
    
    reviews = scrape_reviews(base_url, num_pages)

    if not reviews:
        print("No reviews found.")
    else:
        # Get frequent words
        frequent_words = get_frequent_words(reviews, top_n=top_n)
        print("\nMost Frequent Words:")
        for word, count in frequent_words:
            print(f"{word}: {count}")

        # Calculate sentiment scores for frequent words
        word_sentiments = calculate_word_sentiments(reviews, frequent_words)
        print("\nFrequent Words with Sentiment Scores:")
        for word, sentiment in word_sentiments.items():
            sentiment_label = "Positive" if sentiment > 0 else "Negative" if sentiment < 0 else "Neutral"
            print(f"{word}: Sentiment Score = {sentiment:.2f}, Sentiment = {sentiment_label}")

        # Overall sentiment
        overall_sentiment = analyze_sentiment(reviews)
        sentiment_label = "Positive" if overall_sentiment > 0 else "Negative" if overall_sentiment < 0 else "Neutral"
        print(f"\nOverall Sentiment: {sentiment_label} (Polarity Score: {overall_sentiment:.2f})")

        # Save data to CSV
        df_reviews = pd.DataFrame({"Review": reviews})
        df_reviews["Sentiment"] = df_reviews["Review"].apply(lambda x: TextBlob(x).sentiment.polarity)
        
        df_keywords = pd.DataFrame(frequent_words, columns=["Keyword", "Frequency"])
        df_keywords["Sentiment Score"] = df_keywords["Keyword"].map(word_sentiments)
        
        df_reviews.to_csv("trustpilot_reviews.csv", index=False)
        df_keywords.to_csv("frequent_keywords_sentiment.csv", index=False)

        print("\nData saved to 'trustpilot_reviews.csv' and 'frequent_keywords_sentiment.csv'.")
